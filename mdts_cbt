#!/bin/bash -x

if [ ".$WORKSPACE" == "." ]; then
    WORKSPACE=$( cd `dirname ${BASH_SOURCE[0]}`/../.. ; pwd)
fi

# Defaults which can be modified via command line args
SOURCE_OR_PACKAGE="source"
SOURCE_REPO="midonet/midonet"
SOURCE_BRANCH="master"
SOURCE_DIR="$WORKSPACE/midonet_source"
GIT_SERVER="github.com"
GIT_SSH=false
GIT_SSH_USER=
GIT_CREDENTIALS=
REPO_SERVER="repo.midonet.org/midonet/current"
REPO_CURL_URI="http://repo.midonet.org/packages.midokura.key"
REPO_DIST="unstable"
#ART_URI="ssh://ci-jenkins@artifactory-dev.bcn.midokura.com/artifactory/midonet"
#ART_CURL_URI="http://artifactory-dev.bcn.midokura.com/artifactory/api/gpg/key/public"
ART_SERVER="artifactory-dev.bcn.midokura.com/artifactory/midonet"
ART_CURL_URI="http://artifactory-dev.bcn.midokura.com/artifactory/api/gpg/key/public"
#ART_URI="http://bcn4.bcn.midokura.com:8081/artifactory/midonet"
#ART_CURL_URI="http://bcn4.bcn.midokura.com:8081/artifactory/api/gpg/key/public"
ART_DIST="nightly"
PKG_COMP="main"
LOCAL_TEST="true"
AUTH_METHOD="http"
AUTH_USER=
AUTH_PASS=
TESTS_TO_RUN=
TESTS_TO_EXCLUDE=

# Defaults for internal vars
TEST_ROOT=$( cd `dirname ${BASH_SOURCE[0]}` ; pwd)
INSTALL_ENV=true
INSTALL_PKG=true
FETCH_SOURCE=true
BUILD_SOURCE=true
RUN_TESTS=true
RUN_MDTS=true
PKG_SERVER=
PKG_DIST=
USE_AUTH=false
TARGET=
NO_RUN=false
ECHO=
MDTS_CMD="start test stop"

# Helper Functions
function usage() {
    set +x
    if [ ".$1" != "." ]; then
	echo "Error: $1"
    fi
    echo "Usage: mdts_cbt [opts] git <repo> <branch> [-gs <server>] [-ssh]"
    echo "       mdts_cbt [opts] (source|file) <source_dir>"
    echo "       mdts_cbt [opts] (package|artifactory) <uri> <component>"
    echo "       mdts_cbt [opts] mdts (start|stop|test|clean)"
    echo " "
    echo " General Options (opts):"
    echo "       -tr <dir>               Sets the test root to <dir> (defaults to WS/mdts/tests)"
    echo "       -t <tests>              Tests to run against the specified target in quotes (defaults"
    echo "                               to 'test_bridge' only)"
    echo "       -x <tests>              Tests to exclude in run against the specified target in quotes" 
    echo "       -r                      Test from remote test server (like jenkins) on a fresh VM host"
    echo "                               (versus local machine)"
    echo "       -ne                     Do not install base system environment"
    echo "       -nt                     Do not run tests, only fetch/build/install MN"
    echo "       -n                      Dry run: print commands that would be run but don't proceed"
    echo " Targets: (must specify one and only one):"
    echo "    Target MN in a git repository:"
    echo "       git <repo> <branch>     Use MidoNet found in git repo <repo> on <branch>. "
    echo "       Options:"
    echo "          -git-server <srv>    Set the GIT hub server to use for source (default is github.com)"
    echo "          -git-ssh <user>      Use SSH to connect to GIT server as <user>"
    echo "          -ni                  Do not install MN packages after building source"
    echo "    Target MN in source code on disk:"
    echo "       source <dir>            Use packages waiting on disk in <dir>"
    echo "       Options:"
    echo "          -ni                  Do not install MN packages after building source"
    echo "    Target MN in pre-built packages on disk:"
    echo "       file <dir>              Use packages waiting on disk in <dir>"
    echo "    Target MN in an apt-get repository:"
    echo "       package <srv> <dst>     Use MidoNet <dst> repository located at <srv>"
    echo "       artifactory <srv> <dst> Use MidoNet <dst> artifactory product located at <srv>"
    echo "       Options:"
    echo "          -auth-user <user>    Use authentication to server with user name <user>"
    echo "          -auth-pass <pw>      Use <pw> as password for authentication"
    echo "          -auth-method <mthd>  Use <mthd> as the authentication method (default is http)"
    echo "    Direct control over the MDTS subsystem (no source/package interaction will occur):"
    echo "       mdts                    Send a command to the MDTS subsytem"
    echo "       Options:"
    echo "         start                 Init, boot, and start the MDTS subsystem"
    echo "         stop                  Shutdown the MDTS subsystem"
    echo "         test                  Start the MDTS sybsystem, run tests, then shut it down"
    echo "         testd                 Directly run the MDTS tests on the subsystem"
    echo "         clean                 Stops MDTS and uninstalls MidoNet packages"
}

function check_and_set() {
    VAR=$1
    shift
    if [ $# -eq 0 ]; then 
	return 1
    fi

    if printf '%s' $1 | grep -q "^-"; then
	return 1
    fi

    eval $VAR=$1
    return 0
}

function setup_environment() {
    $ECHO cd $TEST_ROOT

    #Set up the test server with all the tools we'll need to test MidoNet
    if [ ".$INSTALL_ENV" == ".true" ]; then
	$ECHO ./setup_test_server $TEST_ROOT
    fi
}

function fetch_source_from_git() {
    $ECHO rm -rf $SOURCE_DIR
    if [ ".$GIT_SSH" == ".true" ]; then
	GIT_CX=$GIT_SSH_USER@$GIT_SERVER:$SOURCE_REPO 
    else
	GIT_CX=http://$GIT_SERVER/$SOURCE_REPO 
    fi
    echo "Fetching source code from $GIT_CX -b $BRANCH into dir: $DIR"
    $ECHO git clone $GIT_CX -b $SOURCE_BRANCH $SOURCE_DIR
}


function build_source_from_dir {
    echo "Will build source from $SOURCE_DIR"
    $ECHO cd $SOURCE_DIR
    
    $ECHO export LD_LIBRARY_PATH=".:/lib:/usr/lib:/usr/local/lib:./lib"
    
    $ECHO git submodule update --init --recursive
    
    # Build midonet source
    $ECHO ./gradlew -x test debian
}

function install_package_from_dir() {
    echo "Installing midonet packages from all *.deb files in $SOURCE_DIR"
    $ECHO cd $SOURCE_DIR

    for package in `find . -name *.deb`
    do
	$ECHO sudo dpkg --force-confold -i $package
    done
}

function remove_mn_packages() {
    # CLean pre-installed midolman if present
    if [[ `dpkg -l | grep -q midolman` -eq 0 ]]; then
	mdts_clean mdts && true
    fi
}	

function install_package_from_repo() {
    SERVER_LINE="$AUTH_METHOD://"
    if [ ".$USE_AUTH" == ".true" ]; then
	SERVER_LINE=$SERVER_LINE"$AUTH_USER:$AUTH_PASS@"
    fi
    SERVER_LINE="$SERVER_LINE$PKG_SERVER"

    echo "Installing midonet from pre-built packages at $SERVER_LINE $PKG_DIST $PKG_COMP"

    set -e
    # add midokura apt to sources list
    $ECHO sudo bash -c "echo deb [arch=all] $SERVER_LINE $PKG_DIST $PKG_COMP > /etc/apt/sources.list.d/midokura-midonet.list"
    $ECHO curl -k $CURL_URI | sudo apt-key add - && true


    $ECHO sudo apt-get update
    
    # Install midolman
    $ECHO sudo apt-get install -y --force-yes midolman
    $ECHO sudo update-rc.d midolman enable
    
    $ECHO sudo apt-get install -y --force-yes python-midonetclient
    $ECHO sudo apt-get -o Dpkg::Options::="--force-confnew" install -y --force-yes midonet-api
    set +e
}

function mdts_start() {
    if [ ".$RUN_MDTS" == ".true" ]; then
		echo "Tests are in $TEST_ROOT (will create if needed)"
		$ECHO cd $TEST_ROOT/mmm
		# all mmm init
		$ECHO sudo ./init
		
		$ECHO cd scripts
		$ECHO sudo ./boot
		$ECHO sudo ./start
	
		# Wait for all midolman hosts
		if [ ".$NO_RUN" == ".false" ]; then
		    RETRIES=30
		    CONNECTED=false
		    while [ $CONNECTED == "false" ]; do
			if [ `midonet-cli --midonet-url http://localhost:8080/midonet-api -A -e "host list" | wc -l` -eq 3 ]; then
			    CONNECTED=true
			elif [ $RETRIES -eq 0 ]; then
			    echo "Midolman hosts failed to start.  Midonet-API host list:"
			    midonet-cli --midonet-url http://localhost:8080/midonet-api -A -e "host list"
			    exit 1
			else
			    (( RETRIES-- ))
			    sleep 5
		    fi
		    done
		fi
    fi
}

function mdts_clean_target() {
    case $1 in
	"process")
	    $ECHO cd $TEST_ROOT/mmm/scripts
	    $ECHO sudo ./stop && true
	    $ECHO sudo ./shutdown && true
	    $ECHO sudo update-rc.d midolman disable && true
	    ;;
	"mdts")
	    $ECHO sudo dpkg -P midolman midonet-api python-midonetclient && true
	    ;;
	"conf")
	    $ECHO sudo rm -rf /etc/zookeeper.*
	    $ECHO sudo rm -rf /etc/quagga.*
	    $ECHO sudo rm -rf /etc/cassandra.*
	    $ECHO sudo rm -rf /etc/midolman.*
	    $ECHO sudo rm -rf /etc/quagga.*
	    ;;
	"logs")
	    $ECHO sudo rm -rf /var/log/zookeeper.*
	    $ECHO sudo rm -rf /var/log/quagga.*
	    $ECHO sudo rm -rf /var/log/cassandra.*
	    $ECHO sudo rm -rf /var/log/midolman.*
	    $ECHO sudo rm -rf /var/log/quagga.*
	    $ECHO sudo rm -rf /var/log/tomcat7/*
	    ;;
	"libs")
	    $ECHO sudo rm -rf /var/lib/zookeeper.*
	    $ECHO sudo rm -rf /var/lib/quagga.*
	    $ECHO sudo rm -rf /var/lib/cassandra.*
	    $ECHO sudo rm -rf /var/lib/midolman.*
	    $ECHO sudo rm -rf /var/lib/quagga.*
	    ;;
	*)
	    ;;
    esac
}

function mdts_clean() {
    if [ ".$1" == "." ]; then
	    mdts_clean_target process
    else
	while [ ".$1" != "." ]; do
	    if [ ".$1" == ".all" ]; then
		for i in process mdts conf logs libs; do
		    mdts_clean_target $i
		done
	    elif [ ".$1" == ".files" ]; then
		for i in conf logs libs; do
		    mdts_clean_target $i
		done
	    else
		mdts_clean_target $1
	    fi
	    shift
	done
    fi

}

function mdts_stop() {
    if [ ".$RUN_MDTS" == ".true" ]; then
		mdts_clean_target process
    fi
}

function mdts_test() {
    if [ ".$RUN_TESTS" == ".true" ]; then
	$ECHO cd $TEST_ROOT/mdts/tests/functional_tests
	
	# exclude bgp and l2gw tests (bgp and l2gw tests are executed in separate jobs)
	$ECHO ./run_tests.sh $TESTS_LINE $EXCLUDE_LINE
    fi
}

function print_config_check() {
    NEG="will NOT"
    if [ "$1" == ".true" ]; then
	NEG="WILL"
    fi
    echo "We $NEG $2"
}

function print-grep() {
    if echo "$1" | grep -q "$2"; then
	echo "true"
	return 0
    fi
    echo "false"
    return 1
}

function print_config() {
    set +x
    echo target=$TARGET
    echo install_env=$INSTALL_ENV
    echo git_server=$GIT_SERVER
    echo git_use_ssh=$GIT_SSH
    echo git_ssh_user=$GIT_SSH_USER
    echo git_credentials=$GIT_CREDENTIALS
    echo file_location=$FILE_LOCATION
    echo source_branch=$SOURCE_BRANCH
    echo source_repo=$SOURCE_REPO
    echo install_package=$INSTALL_PKG
    echo pkg_server=$PKG_SERVER
    echo curl_uri=$CURL_URI
    echo pkg_distribution=$PKG_DIST
    echo pkg_component=$PKG_COMP
    echo test_root=$TEST_ROOT
    echo tests_to_run=$TESTS_TO_RUN
    echo tests_exclude=$TESTS_TO_EXCLUDE
    echo workspace=$WORKSPACE
    echo mdts_target=$MDTS_CMD

    print_config_check ."$INSTALL_ENV" "install and setup base environment"
    print_config_check .`print-grep "$TARGET" "git"` "fetch MN source from git"
    print_config_check .`print-grep "$TARGET" "source"` "build MN source"
    print_config_check .`print-grep "$TARGET" "file" | grep "$INSTALL_PKG"` "install MN packages"
    print_config_check .`print-grep "$TARGET" "artifactory"` "fetch MN packages from Artifactory"
    print_config_check .`print-grep "$TARGET" "package"` "fetch MN packages from APT-GET repository"
    if [ .`print-grep "$TARGET" "mdts"` == ".true" ]; then
	print_config_check .`print-grep "$MDTS_CMD" "start" | grep "$RUN_MDTS"` "start the MDTS subsystem"
	print_config_check .`print-grep "$MDTS_CMD" "test" | grep "$RUN_TESTS"` "run MDTS functional tests"
	print_config_check .`print-grep "$MDTS_CMD" "stop" | grep "$RUN_MDTS"` "stop the MDTS subsystem"
	print_config_check .`print-grep "$MDTS_CMD" "clean"` "clean the MDTS subsystem"
    fi

    set -x
}


#MAIN

while [ ".$1" != "." ]; do
    case $1 in
	# Behavior flags
	-n | --no-run )
	    NO_RUN="true"
	    shift
	    ;;

	-r | --remote )
	    LOCAL_TEST="false"
	    shift
	    ;;

	-ne | --no-env-install )
	    INSTALL_ENV="false"
	    shift
	    ;;

	-ni | --no-install )
	    INSTALL_PKG="false"
	    shift
	    ;;

	-nt | --no-tests )
	    RUN_TESTS="false"
	    shift
	    ;;

	-nm | --no-mdts )
	    RUN_MDTS="false"
	    shift
	    ;;

	# Test setup
	-tr | --test-root )
	    shift
	    if ! check_and_set TEST_ROOT $*; then
		usage "Invalid directory for test_root: $1"
		exit 1
	    fi
	    shift
	    ;;

        -t | --test )
	    shift
	    while check_and_set TESTS_TO_RUN $*; do
		TESTS_LINE="$TESTS_LINE -t $TESTS_TO_RUN"
		shift
	    done
            ;;

        -x | --exclude )
	    shift
	    while check_and_set TESTS_TO_EXCLUDE $*; do
		EXCLUDE_LINE="$EXCLUDE_LINE -e $TESTS_TO_EXCLUDE"
		shift
	    done
            ;;

	# Build and Test target (file, packages, source, etc.)
        "git" | --git )
	    if [ ".$TARGET" != "." ]; then
		usage "Specified more than one MN target"
		exit 1
	    fi
	    TARGET="git source file mdts"
	    shift
	    check_and_set SOURCE_REPO $* && shift
	    check_and_set SOURCE_BRANCH $* && shift
            ;;

        "source" | --source )
	    if [ ".$TARGET" != "." ]; then
		usage "Specified more than one MN target"
		exit 1
	    fi
	    TARGET="source file mdts"
	    shift
	    check_and_set SOURCE_DIR $* && shift
            ;;

	"file" | --file )
	    if [ ".$TARGET" != "." ]; then
		usage "Specified more than one MN target"
		exit 1
	    fi
	    TARGET="file mdts"
	    shift
	    check_and_set SOURCE_DIR $* && shift
	    ;;

        "package" | --package )
	    if [ ".$TARGET" != "." ]; then
		usage "Specified more than one MN target"
		exit 1
	    fi
	    TARGET="package mdts"
	    CURL_URI=$REPO_CURL_URI
	    PKG_SERVER=$REPO_SERVER
	    PKG_DIST=$REPO_DIST
	    shift
	    check_and_set PKG_SERVER $* && shift
	    check_and_set PKG_DIST $* && shift
            ;;

        "artifactory" | --artifactory )
	    if [ ".$TARGET" != "." ]; then
		usage "Specified more than one MN target"
		exit 1
	    fi
	    TARGET="artifactory mdts"
	    CURL_URI=$ART_CURL_URI
	    PKG_SERVER=$ART_SERVER
	    PKG_DIST=$ART_DIST
	    shift
	    check_and_set PKG_SERVER $* && shift
	    check_and_set PKG_DIST $* && shift
            ;;

	# Extra flags to tweak GIT bheavior
	-git-server | --git-server )
	    shift
	    if ! check_and_set GIT_SERVER $*; then
		usage "Invalid GIT server: $1"
		exit 1
	    fi
	    shift
            ;;

	-git-cred | --git-credentials )
	    shift
	    if ! check_and_set GIT_CREDENTIALS $*; then
		usage "Invalid GIT credentials: $1"
		exit 1
	    fi
	    shift
            ;;

	-git-ssh | --git-ssh )
	    shift
	    if ! check_and_set GIT_SSH_USER $*; then
		usage "Invalid GIT ssh user: $1"
		exit 1
	    fi
	    GIT_SSH=true
	    shift
	    ;;

	# Authentication for repo access
	-auth-user | --auth-user )
	    shift
	    if ! check_and_set AUTH_USER $*; then
		usage "Invalid user name: $1"
		exit 1
	    fi
	    USE_AUTH=true
	    shift
	    ;;

	-auth-pass | --auth-pass )
	    shift
	    if ! check_and_set AUTH_PASS $*; then
		usage "Invalid password: $1"
		exit 1
	    fi
	    shift
	    ;;

	-auth-meth | --auth-meth )
	    shift
	    if ! check_and_set AUTH_METHOD $*; then
		usage "Invalid authentication method: $1"
		exit 1
	    fi
	    shift
	    ;;

	# Controlling the MDTS subsystem directly
	"mdts" )
	    shift
	    TARGET="mdts"
	    case $1 in 
		"start" )
		    MDTS_CMD="start"
		    shift
		    ;;
		
		"test" )
		    MDTS_CMD="start test stop"
		    shift
		    ;;

		"testd" )
		    MDTS_CMD="test"
		    shift
		    ;;

		"stop" )
		    MDTS_CMD="stop"
		    shift
		    ;;
		
		"clean" )
		    MDTS_CMD="clean"
		    MDTS_CLEAN_OPTS="process mdts"
		    shift
		    ;;
		
		"cleanall" )
		    MDTS_CMD="clean"
		    MDTS_CLEAN_OPTS="all"
		    shift
		    ;;
		
		"cleanconfig" )
		    MDTS_CMD="clean"
		    MDTS_CLEAN_OPTS="process files"
		    shift
		    ;;

		*)
		    usage "Must specify a comand to MDTS: start, stop, clean, cleanall, cleanconfig, test, testd"
		    exit 1
		    ;;

		esac
	    ;;

	# Help
        -h | --help )
            usage
            exit
            ;;

	# Catch-all
        * )
	    usage "'$1' is not a valid option or parameter"
	    exit 1
	    ;;
    esac
done

if [ ".$TARGET" == "." ]; then
    usage "Must specify CBT target: git, source, file, package, artifactory; or mdts"
    exit 1
fi

if [ ".$AUTH_PASS" != "." ]; then
    if [ ".$AUTH_USER" == "." ]; then
	usage "Must specify user name if password given"
	exit
    fi
fi

# Set up echo to spit out commands instead of running them if dry-run is set
if [ ".$NO_RUN" == ".true" ]; then
    ECHO="echo"
    set +x
fi

echo "IP interfaces: "
ifconfig | grep -A1 'encap:Ethernet' | grep -v "\-\-" | awk '/Ethernet / { printf "%s: ", $1 } /inet / { print $2 }' | sed 's/addr://g'

echo "Executing the script as: "
whoami

echo "Executing at time: "
date

print_config

# Remote (i.e. jenkins) test tweaks for speed
if [ ".$LOCAL_TEST" == ".false" ]; then
    # Mounting ramdisks
    sudo cp -RL --preserve=all /var/lib /tmp/
    sudo mkdir -p /var/lib
    sudo mount -t tmpfs -o size=1024m tmpfs /var/lib
    sudo cp -RL --preserve=all /tmp/lib/* /var/lib/
    sudo cp -RL --preserve=all /var/log /tmp/
    sudo mkdir -p /var/log
    sudo mount -t tmpfs -o size=256m tmpfs /var/log
    sudo cp -RL --preserve=all /tmp/log/* /var/log
fi

# git = Source from GIT, fetch, build and install
# source = Source on disk, build and install
# file = Package on disk, install
# package = Package on standard apt-get repo, fetch and install
# artifactory = Package on artifactory apt-get repo, fetch and install

setup_environment
for i in $TARGET; do
    case $i in
	"git")
	    fetch_source_from_git
	    ;;
	"source")
	    build_source_from_dir
	    ;;
	"file")
	    remove_mn_packages
	    install_package_from_dir
	    ;;
	"package"|"artifactory")
	    remove_mn_packages
	    install_package_from_repo
	    ;;
	"mdts")
	    for i in $MDTS_CMD; do
		case $i in
		    "start" )
			mdts_start
			;;
		    "test" )
			mdts_test
			;;
		    "stop" )
			mdts_stop
			;;
		    "clean" )
			mdts_clean $MDTS_CLEAN_OPTS
			;;
		esac
	    done
	    ;;
    esac
done

