#!/bin/bash
#
# Use this script to initialize MMM for use with VxLAN gateway tests.
# It's meant to be run AFTER the main boot script.
#
# VXGW tests use a more complex setup that relies on external VTEPs
# (these can be either the emulator, or real switches). In order for
# Midonet to be able to talk to the VTEPs, we need to hack stuff so that
# Midonet sees the VTEP within the "IP bus" that is simulated inside
# MMM.
#
# This IP bus is represented by br0, a virtual bridge on 10.0.0.0/24. Midolmans
# are hidden in namespaces, which are connected to this bridge via veth pairs.
#
# Thus, as a prerequisite, this host and any VTEPs to be used MUST run on the
# 10.0.0.0/24 network. Let's assume eth1 is the host's interface corresponding
# to this network.
#
# We will remove the default rules for 10.0.0.0/24, so that all traffic is
# redirected to the IP bus. This is because the API (running on the host)
# would get all its traffic sucked out of the host, rather than pushed to the
# IP bus so it can talk to ZK, etc.
#
# Obviously, the previous change will render the remote VTEP inaccessible. We
# correct this by adding a unicast route specifically for this IP.
#
# We remove the host's 10.0.0.0/24 ip from eth1, and put eth1 inside the
# bridge. With this, we're removing L3 from the interface so ARPs coming
# from this physical interface will not get paid attention to, and instead go
# straight into the IP bus, and reach Midolman boxes (and ZK, Cass, etc.) In
# practise, this is the same as connecting the IP bus and the external
# 10.0.0.0/24 network. So Midolman can now talk to the VTEP. Hooray.
#
# Miraculously, when someone tries to talk to the VTEP the ARP will appear on
# the IP bus br0, it'll be flooded on all its ports, one of which is eth1.
# Since we removed the L3 from there, the ARP will reach the VTEP who will
# reply, etc.
#
# It's only important to ensure that the VTEPs and the MMM hosts only get high
# addresses in the 10.0.0.0/24 range. TODO (this can be made easier by changing
# MMM's ranges to the higher bits, so we can just mask the lower ones in the
# external network).
#
# An example setup in the Midocloud was made with a network 10.0.0.0/24, DHCP
# configured to assign only ips between .99 and .120

# This is the network used for these tests. All VTEPs and boxes running MMM
# should be aded to this network.
mmm_network="10.0.0.0/24"

function usage {
  cat <<EOF
This script configures the box for usage on VxGW tests and MUST be running
AFTER MMM's own ./boot, once. Please refer to the comments inside this file for
further information.

usage: ./boot_vxgw <interface> <vteps>

Where
  - <interface> is the interface on the $mmm_network network.
  - <vteps> are IP addresses of all the VTEPs that you want accessible from the
    test.

The script will do some basic sanity checks and ensure that stuff is properly
configured.

EOF
}

if [ "$#" -ne "2" ]
then
  echo "Wrong number of arguments"
  usage
  exit
fi

ifc=$1
vteps=$2

echo "Configuring box for vxgw tests"
echo "Network: $mmm_network"
echo "VTEPs: $vteps"

ifconfig $ifc 0 up   # remove the ip from the interface
ip route del $network dev $ifc

for ip in $vteps ; do
  ip netns exec ns008 ping -c 2 -W 2 "$ip" > /dev/null || echo "VTEP at $ip unreachable after route hack from Midolman 1."
done

brctl addif br0 $ifc # plug it to the "ip bus" shared by MMM's midonet

ping -I br0 -c 2 -W 2 10.0.0.8 > /dev/null || echo "Midolman 1 not accessible. This is bad."
ping -I br0 -c 2 -W 2 10.0.0.2 > /dev/null || echo "Zookeeper host not accessible. This is bad."
ping -I br0 -c 2 -W 2 10.0.0.5 > /dev/null || echo "Cassandra host not accessible. This is bad."

echo "Done, if you didn't see any error output, tests should run!"
