#! /bin/bash

# Sets up network namespaces to in order to fake phsycal network topology.
# Please refer to https://sites.google.com/a/midokura.com/wiki/technical-notes/mmm-how-to-run-it-and-how-it-works
# for the diagram showing how they are configured.

brctl addbr br0
ip addr add 10.0.0.240/24 dev br0
ip link set dev br0 up

if test -x /etc/init.d/iptables; then
    /etc/init.d/iptables stop
fi

iptables -t nat -A POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j MASQUERADE
echo 1 >/proc/sys/net/ipv4/ip_forward

# for hosts
n=000
ip netns add ns$n

for i in {1..10}; do
    n=$(printf "%03d" $i)
    ip link add dev veth$n type veth peer name veth$n.1
    ip link set dev veth$n up
    brctl addif br0 veth$n
    ip netns add ns$n
    ip netns exec ns$n ip link set dev lo up
    ip link set dev veth$n.1 up netns ns$n name eth0
    ip netns exec ns$n ip addr add 10.0.0.$i/24 dev eth0
    ip netns exec ns$n ip route add 0.0.0.0/0 via 10.0.0.240
done

n=000
ip link add dev veth$n.0 type veth peer name veth$n.1
ip link set dev veth$n.0 up
ip link set dev veth$n.0 up netns ns$n name eth0
ip link set dev veth$n.1 up netns ns008 name eth1

ip link add dev veth$n.0 type veth peer name veth$n.1
ip link set dev veth$n.0 up
ip link set dev veth$n.0 up netns ns$n name eth1
ip link set dev veth$n.1 up netns ns009 name eth1

ip netns exec ns$n ip link set dev lo up
ip netns exec ns$n ip addr add 1.1.1.1/32 dev lo
ip netns exec ns$n ip addr add 10.1.0.240/16 dev eth0
ip netns exec ns$n ip addr add 10.2.0.240/16 dev eth1

ip netns exec ns$n sh -c 'echo 0 >/proc/sys/net/ipv4/conf/all/rp_filter'
ip netns exec ns$n sh -c 'echo 0 >/proc/sys/net/ipv4/conf/eth0/rp_filter'
ip netns exec ns$n sh -c 'echo 0 >/proc/sys/net/ipv4/conf/eth1/rp_filter'

# for vms: need a suitable tool to specify/construct physical topology
. interfaces

for ((i = 0; i < ${#interfaces[@]}; i = i + 4)); do
    n=$(printf "%03d" ${interfaces[$i]})
    m=${interfaces[$((i+1))]}
    ip=${interfaces[$((i+2))]}
    gw=${interfaces[$((i+3))]}
    ip netns add ns$n.$m
    ip link add veth$m type veth peer name veth$m.0
    ip link set dev veth$m up netns ns$n name veth$m
    ip link set dev veth$m.0 up netns ns$n.$m name eth0
    ip netns exec ns$n.$m ip addr add $ip dev eth0
    ip netns exec ns$n.$m ip link set dev lo up
    ip netns exec ns$n.$m ip link set dev eth0 up
    ip netns exec ns$n.$m ip route add 0.0.0.0/0 via $gw
done

# for vlan
brctl addbr brv0
ip link set dev brv0 up

for i in {1..2}; do
    n=$(printf "%03d" $i)
    for j in {0..1}; do
        ip link add dev vethv$n.$j type veth peer name vethv$n.$j.1
        ip link set dev vethv$n.$j up
        ip netns add nsv$n.$j
        ip netns exec nsv$n.$j ip link set dev lo up
        ip link set dev vethv$n.$j.1 up netns nsv$n.$j name eth0
    done
done

ip netns exec nsv001.0 ip link add link eth0 name eth0.1 type vlan id 1
ip netns exec nsv001.1 ip link add link eth0 name eth0.1 type vlan id 1
ip netns exec nsv002.0 ip link add link eth0 name eth0.2 type vlan id 2
ip netns exec nsv002.1 ip link add link eth0 name eth0.2 type vlan id 2

ip netns exec nsv001.0 ip link set dev eth0.1 up
ip netns exec nsv001.1 ip link set dev eth0.1 up
ip netns exec nsv002.0 ip link set dev eth0.2 up
ip netns exec nsv002.1 ip link set dev eth0.2 up

ip netns exec nsv001.0 ip addr add 172.16.0.224/24 dev eth0.1
ip netns exec nsv001.1 ip addr add 172.16.0.225/24 dev eth0.1
ip netns exec nsv002.0 ip addr add 172.16.0.224/24 dev eth0.2
ip netns exec nsv002.1 ip addr add 172.16.0.225/24 dev eth0.2

brctl addif brv0 vethv001.0
brctl addif brv0 vethv001.1
brctl addif brv0 vethv002.0
brctl addif brv0 vethv002.1

ip link add dev trunk0 type veth peer name trunk0.1
ip link set dev trunk0 up
ip link set dev trunk0.1 up

brctl addif brv0 trunk0
ip link set dev trunk0.1 up netns ns008 name eth2

ip link add dev trunk1 type veth peer name trunk1.1
ip link set dev trunk1 up
ip link set dev trunk1.1 up

brctl addif brv0 trunk1
ip link set dev trunk1.1 up netns ns009 name eth2

brctl stp brv0 on
